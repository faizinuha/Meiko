{
  "Add Event Listener": {
    "body": [
      "${1:element}.addEventListener('${2:event}', (${3:eventParam}) => {",
      "    ${4:// handler code}",
      "});"
    ],
    "description": "Add an event listener",
    "prefix": "jsAddEvent"
  },
  "Array Declaration": {
    "body": ["const ${1:arrayName} = [${2:value1}, ${3:value2}, ${4:value3}];"],
    "description": "Declare an array in Javascript",
    "prefix": "jsArray"
  },
  "Array Map": {
    "body": [
      "const mappedArray = ${1:array}.map(${2:item} => {",
      "    return ${3:item};",
      "});"
    ],
    "description": "Map over an array",
    "prefix": "jsMap"
  },
  "Arrow Function": {
    "body": [
      "const ${1:functionName} = (${2:parameters}) => {",
      "    ${3:// code to execute}",
      "};"
    ],
    "description": "Basic arrow function in javascript",
    "prefix": "jsArrow"
  },
  "Basic Function": {
    "body": [
      "function ${1:functionName} (${2:parameters}) {",
      "   ${3:// function body}",
      "   return ${4:result};",
      "}"
    ],
    "description": "Create a basic function",
    "prefix": "jsFunc"
  },
  "Console Clear": {
    "body": ["console.clear();"],
    "description": "Console clear",
    "prefix": "jsClr"
  },
  "Console Count": {
    "body": ["console.count(${1:label});"],
    "description": "Console count",
    "prefix": "jsCo"
  },
  "Console Debug": {
    "body": ["console.debug(${1:object});"],
    "description": "Console debug",
    "prefix": "jsDb"
  },
  "Console Error": {
    "body": ["console.error(${1:object});"],
    "description": "Console Error",
    "prefix": "jsErr"
  },
  "Console Group": {
    "body": ["console.group(${1:label});"],
    "description": "Console group",
    "prefix": "jsGrp"
  },
  "Console Log": {
    "body": ["console.log(${1:message});"],
    "description": "Log output console",
    "prefix": "jsLog"
  },
  "Convert JSON to Array Value": {
    "body": [
      "const values = Object.values(${1:jsonObject});",
      "console.log(values);"
    ],
    "description": "Convert a JSON object to an array values",
    "prefix": "jsonValue"
  },
  "For Loop": {
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "    ${3:// loop body}",
      "}"
    ],
    "description": "Basic for loop",
    "prefix": "jsFor"
  },
  "Get Element by Class": {
    "body": [
      "const ${1:elements} = document.getElementsByClassName('${2:className}');"
    ],
    "description": "Get element by class",
    "prefix": "jsGetCls"
  },
  "Get Element by Id": {
    "body": ["const ${1:element} = document.getElementById('${2:id}');"],
    "description": "Get element by Id",
    "prefix": "jsGetId"
  },
  "Get Elements by Tag Name": {
    "body": [
      "const ${1:elements} = document.getElementsByTagName('${2:tagName}');"
    ],
    "description": "Get elements by tag name",
    "prefix": "jsGetTag"
  },
  "If-Else Statement": {
    "body": [
      "if (${1:condition}) {",
      "    ${2:// if body}",
      "} else {",
      "    ${3:// else body}",
      "}"
    ],
    "description": "If-Else statement",
    "prefix": "jsIf"
  },
  "JSON Parse": {
    "body": ["JSON.parse(${1:jsonString});"],
    "description": "Parse a JSON string to a JavaScript object",
    "prefix": "jsParse"
  },
  "JSON Stringify": {
    "body": ["JSON.stringify(${1:object});"],
    "description": "Convert JavaScript object to a JSON string",
    "prefix": "jsStr"
  },
  "Object Declaration": {
    "body": [
      "const ${1:objectName} = {",
      "   ${2:key1}: ${3:value1},",
      "   ${4:key2}: ${5:value2}",
      "};"
    ],
    "description": "Declare an object in Javascript",
    "prefix": "jsObj"
  },
  "Query Selector": {
    "body": ["const ${1:element1} = document.querySelector('${2:selector}');"],
    "description": "Get the first element matching a CSS selector",
    "prefix": "jsQuerySel"
  },
  "Query Selector All": {
    "body": [
      "const ${1:elements} = document.querySelectorAll('${2:selector}');"
    ],
    "description": "Get all elements matching a CSS selector",
    "prefix": "jsQueryAll"
  },
  "Remove Child": {
    "body": ["${1:parent}.removeChild(${2:child});"],
    "description": "Remove a child element from a parent",
    "prefix": "jsRemoveChild"
  },
  "Set Attribute": {
    "body": ["${1:element}.setAttribute('${2:attribute}', '${3:value}');"],
    "description": "Set an attribute on a DOM element",
    "prefix": "jsSetAttr"
  },
  "Try Catch": {
    "body": [
      "try {",
      "   ${1:// error code}",
      "} catch (error) {",
      "   console.error(error);",
      "}"
    ],
    "description": "Try catch block for error handling",
    "prefix": "jsTryCatch"
  },
  "Variable Declaration": {
    "body": [
      "let ${1:variableName} = ${2:value};",
      "const ${3:contsName} = ${4:contsValue};"
    ],
    "description": "Declare a variable and constant in Javascript",
    "prefix": "jsVar"
  },
  "While Loop": {
    "body": ["while (${1:condition}) {", "   ${2:// while body}", "}"],
    "description": "Basic for while",
    "prefix": "jsWhile"
  }
}
